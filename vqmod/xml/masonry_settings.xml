<?xml version="1.0" encoding="UTF-8"?>
<modification>
    <id>VQMOD MASONRY PRODUCTS SETTINGS - DO NOT REMOVE</id>
    <version>1.4.x and 1.5.x</version>
    <vqmver required="true">2.4.0</vqmver>
    <author>nlitewebs.com</author>

    <file name="admin/language/english/common/header.php">
      <operation>
	<search position="before"><![CDATA[?>]]></search>
	<add><![CDATA[$_['text_masonry_setting'] = 'Masonry Settings';]]></add>
      </operation>
    </file>
    
    <file name="admin/controller/common/header.php">
      <operation>
	<search position="after"><![CDATA[$this->language->load('common/header');]]></search>
	<add><![CDATA[$this->data['text_masonry_setting'] = $this->language->get('text_masonry_setting');]]></add>
      </operation>
      
      <operation>
	<search position="after"><![CDATA[$this->data['category'] = $this->url->link('catalog/category', 'token=' . $this->session->data['token'], 'SSL');]]></search>
	<add><![CDATA[$this->data['masonrysettings'] = $this->url->link('common/masonrysettings', 'token=' . $this->session->data['token'], 'SSL');]]></add>
      </operation>
    </file>
    
    <file name="admin/view/template/common/header.tpl">
      <operation>
	<search position="before"><![CDATA[<ul class="right" style="display: none;">]]></search>
	<add><![CDATA[<ul class="left" style="display: none;"><li></li><li id="masonrysettings"><a href="<?php echo $masonrysettings; ?>" class="top"><?php echo $text_masonry_setting; ?></a></li></ul>]]></add>
      </operation>
    </file>
    
    <file name="catalog/controller/product/category.php">

      <operation>
	<search position="before"><![CDATA[$this->data['breadcrumbs'] = array();]]></search>
	<add><![CDATA[$this->document->addScript('catalog/view/javascript/jquery/masonry/masonry.pkgd.js');
		$this->document->addScript('catalog/view/javascript/jquery/masonry/imagesloaded.pkgd.js');
		$this->document->addScript('catalog/view/javascript/jquery/masonry/jquery.infinitescroll.js');
		$this->document->addScript('catalog/view/javascript/jquery/masonry/masonrysettings.js');
		$this->document->addStyle('catalog/view/javascript/jquery/masonry/masonrysettings.css');]]>
	</add>
      </operation>

      <operation>
	<search position="before"><![CDATA[if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/product/category.tpl')) {]]></search>
	<add><![CDATA[if($this->config->get('masonry_category_theme') == 1) {
			    $this->data['masonry_category_sort_option'] = ($this->config->get('masonry_category_sort_option') == 1) ? true : false;
			    $this->data['masonry_category_limit_option'] = ($this->config->get('masonry_category_limit_option') == 1) ? true : false;
			    $this->data['masonry_category_price_option'] = ($this->config->get('masonry_category_price_option') == 1) ? true : false;
			    $this->data['masonry_category_add_wishlist'] = ($this->config->get('masonry_category_add_wishlist') == 1) ? true : false;
			    $this->data['masonry_category_add_compare'] = ($this->config->get('masonry_category_add_compare') == 1) ? true : false;

			    $url = '';

			    if (isset($this->request->get['path'])) {
				$parts = explode('_', (string)$this->request->get['path']);
				$category_id = (int)array_pop($parts);

				$url .= '&category_id=' . $category_id;
			    }

			    if (isset($this->request->get['filter'])) {
				$url .= '&filter=' . $this->request->get['filter'];
			    }

			    if (isset($this->request->get['sort'])) {
				$url .= '&sort=' . $this->request->get['sort'];
			    }	

			    if (isset($this->request->get['order'])) {
				$url .= '&order=' . $this->request->get['order'];
			    }

			    if (isset($this->request->get['limit'])) {
				$url .= '&limit=' . $this->request->get['limit'];
			    } else {
				$url .= '&limit=' . $this->config->get('config_catalog_limit');;
			    }

			    $url .= '&p=2';

			    $this->data['masonry_url'] = $this->url->link('product/category/AJAXGetMasonryProducts',$url);
			}]]>
	</add>
      </operation>
      
      <operation>
	<search position="before"><![CDATA[$category_info = $this->model_catalog_category->getCategory($category_id);]]></search>
	<add><![CDATA[if($this->config->get('masonry_category_theme') == 1) {
				$this->data['category_id'] = $category_id;
			    }]]>
	</add>
      </operation>
      
      <operation>
	<search position="before"><![CDATA[$this->data['products'][] = array(]]></search>
	<add><![CDATA[if($this->config->get('masonry_category_theme') == 1) {
				if ($result['image']) {
			$image = $this->model_tool_image->onesize($result['image'], $this->config->get('masonry_category_size_width'));
		} else {
			$image = $this->model_tool_image->onesize('no_image.jpg', $this->config->get('masonry_category_size_width'));
		}
			    }]]>
	</add>
      </operation>

      <operation>
	<search position="replace"><![CDATA[$this->template = $this->config->get('config_template') . '/template/product/category.tpl';]]></search>
	<add><![CDATA[if($this->config->get('masonry_category_theme') == 1) {
				$this->template = $this->config->get('config_template') . '/template/product/categorymasonry.tpl';
			    } else {
				$this->template = $this->config->get('config_template') . '/template/product/category.tpl';
			    }]]>
	</add>
      </operation>
      
      <operation>
	<search position="replace"><![CDATA[$this->template = 'default/template/product/category.tpl';]]></search>
	<add><![CDATA[if($this->config->get('masonry_category_theme') == 1) {
				$this->template = 'default/template/product/categorymasonry.tpl';
			    } else {
				$this->template = 'default/template/product/category.tpl';
			    }]]>
	</add>
      </operation>
      
      <operation>
	<search position="before"><![CDATA[public function index() {]]></search>
	<add><![CDATA[public function AJAXGetMasonryProducts(){
	    $this->language->load('product/category');
	    $this->load->model('catalog/category');
	    $this->load->model('catalog/product');
	    $this->load->model('tool/image');
	    
	    if (isset($this->request->get['filter'])) {
		$filter = $this->request->get['filter'];
	    } else {
		$filter = '';
	    }

	    if (isset($this->request->get['sort'])) {
		$sort = $this->request->get['sort'];
	    } else {
		$sort = 'p.sort_order';
	    }

	    if (isset($this->request->get['order'])) {
		$order = $this->request->get['order'];
	    } else {
		$order = 'ASC';
	    }

	    if (isset($this->request->get['p'])) {
		$page = $this->request->get['p'] + 1;
	    } else { 
		$page = 1;
	    }
	    
	    if (isset($this->request->get['limit'])) {
		$limit = $this->request->get['limit'];
	    } else { 
		$limit = $this->config->get('config_catalog_limit');
	    }
	    
	    $this->data['button_cart'] = $this->language->get('button_cart');
	    $this->data['button_wishlist'] = $this->language->get('button_wishlist');
	    $this->data['button_compare'] = $this->language->get('button_compare');
	    $this->data['text_tax'] = $this->language->get('text_tax');
	    
	    if($this->config->get('masonry_category_theme') == 1) {
		$this->data['masonry_category_sort_option'] = ($this->config->get('masonry_category_sort_option') == 1) ? true : false;
		$this->data['masonry_category_limit_option'] = ($this->config->get('masonry_category_limit_option') == 1) ? true : false;
		$this->data['masonry_category_price_option'] = ($this->config->get('masonry_category_price_option') == 1) ? true : false;
		$this->data['masonry_category_add_wishlist'] = ($this->config->get('masonry_category_add_wishlist') == 1) ? true : false;
		$this->data['masonry_category_add_compare'] = ($this->config->get('masonry_category_add_compare') == 1) ? true : false;
	    }
	    
	    $this->data['products'] = array();

	    $data = array(
		    'filter_category_id' => $this->request->get['category_id'],
		    'filter_filter'      => $filter, 
		    'sort'               => $sort,
		    'order'              => $order,
		    'start'              => $page - 1,
		    'limit'              => $limit
	    );
	    
	    $results = $this->model_catalog_product->getProducts($data);
	    
	    foreach ($results as $result) {
		if ($result['image']) {
			$image = $this->model_tool_image->onesize($result['image'], $this->config->get('masonry_category_size_width'));
		} else {
			$image = $this->model_tool_image->onesize('no_image.jpg', $this->config->get('masonry_category_size_width'));
		}

		if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
			$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')));
		} else {
			$price = false;
		}

		if ((float)$result['special']) {
			$special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')));
		} else {
			$special = false;
		}	

		if ($this->config->get('config_tax')) {
			$tax = $this->currency->format((float)$result['special'] ? $result['special'] : $result['price']);
		} else {
			$tax = false;
		}				

		if ($this->config->get('config_review_status')) {
			$rating = (int)$result['rating'];
		} else {
			$rating = false;
		}
		
		$description = strip_tags(html_entity_decode($result['meta_description'], ENT_QUOTES, 'UTF-8'));
		//var_dump($description);
		if(strlen($description)>15){
			$description = substr($description, 0, 30) . '...';
		}else{
			$description = $description;
		}
		
		$this->data['products'][] = array(
		    'product_id'  => $result['product_id'],
		    'thumb'       => $image,
		    'name'        => $result['name'],
		    //'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, 30) . '..',
			'description' => $description,
		    'price'       => $price,
		    'special'     => $special,
		    'tax'         => $tax,
		    'rating'      => $result['rating'],
		    'reviews'     => sprintf($this->language->get('text_reviews'), (int)$result['reviews']),
		    'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id']),
			'quantity'	  => $result['quantity'],
			'StockInicial' => $result['StockInicial']
		);
				
	    }
	    
	    if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/product/categorymasonrywidget.tpl')) {
		$this->template = $this->config->get('config_template') . '/template/product/categorymasonrywidget.tpl';
	    } else {
		$this->template = 'default/template/product/masonrywidget.tpl';
	    }
	    
	   $this->response->setOutput($this->render());
	}]]>
	</add>
      </operation>
      
    </file>
    
    <file name="catalog/controller/product/search.php">

      <operation>
	<search position="before"><![CDATA[$this->data['breadcrumbs'] = array();]]></search>
	<add><![CDATA[$this->document->addScript('catalog/view/javascript/jquery/masonry/masonry.pkgd.js');
		$this->document->addScript('catalog/view/javascript/jquery/masonry/imagesloaded.pkgd.js');
		$this->document->addScript('catalog/view/javascript/jquery/masonry/jquery.infinitescroll.js');
		$this->document->addScript('catalog/view/javascript/jquery/masonry/masonrysettings.js');
		$this->document->addStyle('catalog/view/javascript/jquery/masonry/masonrysettings.css');]]>
	</add>
      </operation>

      <operation>
	<search position="before"><![CDATA[if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/product/search.tpl')) {]]></search>
	<add><![CDATA[if($this->config->get('masonry_search_theme') == 1) {
			    $this->data['masonry_search_sort_option'] = ($this->config->get('masonry_search_sort_option') == 1) ? true : false;
			    $this->data['masonry_search_limit_option'] = ($this->config->get('masonry_search_limit_option') == 1) ? true : false;
			    $this->data['masonry_search_price_option'] = ($this->config->get('masonry_search_price_option') == 1) ? true : false;
			    $this->data['masonry_search_add_wishlist'] = ($this->config->get('masonry_search_add_wishlist') == 1) ? true : false;
			    $this->data['masonry_search_add_compare'] = ($this->config->get('masonry_search_add_compare') == 1) ? true : false;

			    $url = '';

			    if (isset($this->request->get['search'])) {
				$url .= '&search=' . urlencode(html_entity_decode($this->request->get['search'], ENT_QUOTES, 'UTF-8'));
			    }

			    if (isset($this->request->get['tag'])) {
				$url .= '&tag=' . urlencode(html_entity_decode($this->request->get['tag'], ENT_QUOTES, 'UTF-8'));
			    }

			    if (isset($this->request->get['description'])) {
				$url .= '&description=' . $this->request->get['description'];
			    }

			    if (isset($this->request->get['category_id'])) {
				$url .= '&category_id=' . $this->request->get['category_id'];
			    }

			    if (isset($this->request->get['sub_category'])) {
				$url .= '&sub_category=' . $this->request->get['sub_category'];
			    }

			    if (isset($this->request->get['sort'])) {
				$url .= '&sort=' . $this->request->get['sort'];
			    }	

			    if (isset($this->request->get['order'])) {
				$url .= '&order=' . $this->request->get['order'];
			    }

			    if (isset($this->request->get['limit'])) {
				$url .= '&limit=' . $this->request->get['limit'];
			    } else {
				$url .= '&limit=' . $this->config->get('config_catalog_limit');;
			    }

			    $url .= '&p=2';

			    $this->data['masonry_url'] = $this->url->link('product/search/AJAXGetMasonryProducts',$url);
			}]]>
	</add>
      </operation>
      
      <operation>
	<search position="before"><![CDATA[$this->data['products'][] = array(]]></search>
	<add><![CDATA[if($this->config->get('masonry_search_theme') == 1) {
				if ($result['image']) {
			$image = $this->model_tool_image->onesize($result['image'], $this->config->get('masonry_search_size_width'));
		} else {
			$image = $this->model_tool_image->onesize('no_image.jpg', $this->config->get('masonry_search_size_width'));
		}
			    }]]>
	</add>
      </operation>

      <operation>
	<search position="replace"><![CDATA[$this->template = $this->config->get('config_template') . '/template/product/search.tpl';]]></search>
	<add><![CDATA[if($this->config->get('masonry_search_theme') == 1) {
				$this->template = $this->config->get('config_template') . '/template/product/searchmasonry.tpl';
			    } else {
				$this->template = $this->config->get('config_template') . '/template/product/search.tpl';
			    }]]>
	</add>
      </operation>
      
      <operation>
	<search position="replace"><![CDATA[$this->template = 'default/template/product/search.tpl';]]></search>
	<add><![CDATA[if($this->config->get('masonry_search_theme') == 1) {
				$this->template = 'default/template/product/searchmasonry.tpl';
			    } else {
				$this->template = 'default/template/product/search.tpl';
			    }]]>
	</add>
      </operation>
      
      <operation>
	<search position="before"><![CDATA[public function index() {]]></search>
	<add><![CDATA[public function AJAXGetMasonryProducts(){
	    $this->language->load('product/search');
	    $this->load->model('catalog/category');
	    $this->load->model('catalog/product');
	    $this->load->model('tool/image');
	    
	    if (isset($this->request->get['search'])) {
		$search = $this->request->get['search'];
	    } else {
		$search = '';
	    } 

	    if (isset($this->request->get['tag'])) {
		$tag = $this->request->get['tag'];
	    } elseif (isset($this->request->get['search'])) {
		$tag = $this->request->get['search'];
	    } else {
		$tag = '';
	    } 

	    if (isset($this->request->get['description'])) {
		$description = $this->request->get['description'];
	    } else {
		$description = '';
	    } 

	    if (isset($this->request->get['category_id'])) {
		$category_id = $this->request->get['category_id'];
	    } else {
		$category_id = 0;
	    } 

	    if (isset($this->request->get['sub_category'])) {
		$sub_category = $this->request->get['sub_category'];
	    } else {
		$sub_category = '';
	    } 

	    if (isset($this->request->get['sort'])) {
		$sort = $this->request->get['sort'];
	    } else {
		$sort = 'p.sort_order';
	    } 

	    if (isset($this->request->get['order'])) {
		$order = $this->request->get['order'];
	    } else {
		$order = 'ASC';
	    }

	    if (isset($this->request->get['p'])) {
		$page = $this->request->get['p'] + 1;
	    } else { 
		$page = 1;
	    }
	    
	    if (isset($this->request->get['limit'])) {
		$limit = $this->request->get['limit'];
	    } else {
		$limit = $this->config->get('config_catalog_limit');
	    }
	    
	    $this->data['button_cart'] = $this->language->get('button_cart');
	    $this->data['button_wishlist'] = $this->language->get('button_wishlist');
	    $this->data['button_compare'] = $this->language->get('button_compare');
	    $this->data['text_tax'] = $this->language->get('text_tax');
	    
	    if($this->config->get('masonry_search_theme') == 1) {
		$this->data['masonry_search_sort_option'] = ($this->config->get('masonry_search_sort_option') == 1) ? true : false;
		$this->data['masonry_search_limit_option'] = ($this->config->get('masonry_search_limit_option') == 1) ? true : false;
		$this->data['masonry_search_price_option'] = ($this->config->get('masonry_search_price_option') == 1) ? true : false;
		$this->data['masonry_search_add_wishlist'] = ($this->config->get('masonry_search_add_wishlist') == 1) ? true : false;
		$this->data['masonry_search_add_compare'] = ($this->config->get('masonry_search_add_compare') == 1) ? true : false;
	    }
	    
	    $this->data['products'] = array();

	    $data = array(
		    'filter_name'         => $search, 
		    'filter_tag'          => $tag, 
		    'filter_description'  => $description,
		    'filter_category_id'  => $category_id, 
		    'filter_sub_category' => $sub_category, 
		    'sort'                => $sort,
		    'order'               => $order,
		    'start'               => $page - 1,
		    'limit'               => $limit
	    );
	    
	    $results = $this->model_catalog_product->getProducts($data);
	    
	    foreach ($results as $result) {
		if ($result['image']) {
			$image = $this->model_tool_image->onesize($result['image'], $this->config->get('masonry_search_size_width'));
		} else {
			$image = $this->model_tool_image->onesize('no_image.jpg', $this->config->get('masonry_search_size_width'));
		}

		if (($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) {
			$price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')));
		} else {
			$price = false;
		}

		if ((float)$result['special']) {
			$special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')));
		} else {
			$special = false;
		}	

		if ($this->config->get('config_tax')) {
			$tax = $this->currency->format((float)$result['special'] ? $result['special'] : $result['price']);
		} else {
			$tax = false;
		}				

		if ($this->config->get('config_review_status')) {
			$rating = (int)$result['rating'];
		} else {
			$rating = false;
		}
		
		$this->data['products'][] = array(
		    'product_id'  => $result['product_id'],
		    'thumb'       => $image,
		    'name'        => $result['name'],
		    'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, 100) . '..',
		    'price'       => $price,
		    'special'     => $special,
		    'tax'         => $tax,
		    'rating'      => $result['rating'],
		    'reviews'     => sprintf($this->language->get('text_reviews'), (int)$result['reviews']),
		    'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id']),
			'quantity'	  => $result['quantity']
		);
				
	    }
	    
	    if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/product/searchmasonrywidget.tpl')) {
		$this->template = $this->config->get('config_template') . '/template/product/searchmasonrywidget.tpl';
	    } else {
		$this->template = 'default/template/product/masonrywidget.tpl';
	    }
	    
	   $this->response->setOutput($this->render());
	}]]>
	</add>
      </operation>
      
    </file>
	
</modification>